general:
  conv_mode: matrix
  enable_incomplete_verification: false
  root_path: ${CONFIG_PATH}  # Folder containing the csv and vnnlib files for verification.
  csv_name: specs/quadrotor2d_state_feedback.csv
model:
  name: >-
    Customized("../neural_lyapunov_training/models.py", "create_quadrotor2d_model",
    lyapunov_parameters={"R_rows": 6, "eps": 0.01},
    lyapunov_func="lyapunov.NeuralNetworkQuadraticLyapunov",
    controller_parameters={"nlayer": 2, "hidden_dim": 8, "clip_output":"clamp", "u_lo": torch.tensor([0, 0]), "u_up": torch.tensor([5.9596, 5.9596])},
    loss_parameters={"kappa": 0, "fuse_dV": True},
    loss_func="lyapunov.LyapunovDerivativeSimpleLossWithVBox")
  path: ${CONFIG_PATH}/../models/quadrotor2d_state_feedback.pth
  input_shape: [-1, 6]
  optimize_graph: Customized("../neural_lyapunov_training/optimize_graph.py", "optimize_graph")
data:
  # Only used for computing the level set, not the final verification which uses the CSV file.
  # Use the box_data() loader in "lyapunov_models.py".
  # Scale is the factor of tbe verification box. Set scale = 1.0 by default.
  # Reduce scale to make the problem easier.
  # hole_size must be 1.0 here, since we want to find the minimum on the boundary.
  dataset: >-
    Customized("../neural_lyapunov_training/models.py", "box_data",
    lower_limit=[-0.75, -0.75, -np.pi/2, -4, -4, -3],
    upper_limit=[0.75, 0.75, np.pi/2, 4, 4, 3],
    ndim=6, scale=1.0, hole_size=1.0)
attack:
  pgd_order: skip
  pgd_restarts: 1000000
  pgd_steps: 1000
  pgd_alpha: 0.001
  pgd_alpha_scale: True
solver:
  batch_size: 3000000
  min_batch_size_ratio: 0.
  bound_prop_method: crown
bab:
  override_timeout: 1.e+8
  sort_domain_interval: -1
  branching:
    method: sb
    input_split:
      enable: True
      ibp_enhancement: True
      compare_with_old_bounds: True
      sb_coeff_thresh: 1.e-2
      sb_sum: True
      touch_zero_score: 0.1
      sort_descending: False
      adv_check: -1
